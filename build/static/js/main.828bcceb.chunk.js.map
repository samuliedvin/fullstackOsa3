{"version":3,"sources":["components/Filter.js","components/Entry.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_ref","filter","handleFilterChange","react_default","a","createElement","value","onChange","e","Entry","props","person","name","number","onClick","removeEntry","Notification","message","className","baseUrl","services_persons","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","concat","remove","delete","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","personService","persons","forEach","matchSearch","setState","addEntry","event","preventDefault","match","state","newName","toLowerCase","indexOf","nameObject","newNumber","find","window","confirm","error","setTimeout","catch","handleNameChange","target","handleNumberChange","toConsumableArray","_this2","personsToShow","components_Notification","components_Filter","onSubmit","type","map","components_Entry","key","React","Component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.828bcceb.chunk.js","sourcesContent":["import React from 'react'\nconst Filter = ({filter, handleFilterChange}) => (\n    <div>\n        rajaa näytettäviä: <input value = {filter} onChange = {(e) => handleFilterChange(e) }/>\n    </div>\n)\n\nexport default Filter","import React from 'react';\n\nconst Entry = (props) => (\n    <tr>\n        <td>{props.person.name}</td>\n        <td>{props.person.number}</td>\n        <td><button onClick={props.removeEntry}>poista</button></td>\n    </tr>\n)\n\nexport default Entry","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  const create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n  const remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  }\n\nexport default { getAll, create, update, remove }","import React from 'react'\nimport Filter from './components/Filter'\nimport Entry from './components/Entry'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n        persons: [],\n        newName: '',\n        newNumber: '',\n        filter: '',\n        error: null\n        }\n    }\n\n    componentDidMount = () => {\n        personService\n            .getAll()\n            .then(persons => {\n                // this needed to be done, becuse my search works like that :P\n                persons.forEach(person => person.matchSearch = true) \n                this.setState({ persons })\n            })\n    }\n\n    addEntry = (event) => {\n        event.preventDefault();\n        let match = this.state.newName.toLowerCase().indexOf(this.state.filter.toLowerCase()) >= -1 \n        const nameObject = {\n            name: this.state.newName,\n            number: this.state.newNumber\n        }\n        if(!this.state.persons.find(person => person.name === this.state.newName)) {\n            personService\n                .create(nameObject)\n                .then(person => {\n                    person.matchSearch = match;\n                    this.setState({\n                        persons: this.state.persons.concat(person),\n                        newName: '',\n                        newNumber: '',\n                        error: 'puhelinnumero lisätty onnistuneesti',\n                    })\n                    setTimeout(() => {\n                        this.setState({error: null})\n                    }, 2000)\n                })\n\n        } else {\n            if(window.confirm(\"Nimelle on jo tallennettu numero, haluatko päivittää sen?\")) {\n                let id = this.state.persons.find(person => person.name === this.state.newName).id\n                personService\n                    .update(id, nameObject)\n                    .then(() => {\n                        personService\n                            .getAll()\n                            .then(persons => {\n                                // this needed to be done, becuse my search works like that :P\n                                persons.forEach(person => person.matchSearch = true) \n                                this.setState({ persons })\n                                this.setState({\n                                    error: 'puhelinnumero vaihdettu onnistuneesti',\n                                  })\n                                setTimeout(() => {\n                                    this.setState({error: null})\n                                }, 2000)\n                            }\n                        )\n                    })\n                    .catch(error => {\n                        personService\n                            .create(nameObject)\n                            .then(() => {\n                                personService\n                                    .getAll()\n                                    .then(persons => {\n                                        // this needed to be done, becuse my search works like that :P\n                                        persons.forEach(person => person.matchSearch = true) \n                                        this.setState({ persons })\n                                        this.setState({\n                                            error: 'puhelinnumero vaihdettu onnistuneesti',\n                                          })\n                                        setTimeout(() => {\n                                            this.setState({error: null})\n                                        }, 2000)\n                                    })\n                            })\n                    })\n            }\n        } \n    }\n\n    removeEntry = (id) => () => {\n        if(window.confirm(\"Haluatko varmasti poistaa numeron?\")) {\n            personService\n                .remove(id)\n                .then(() => {\n                    personService\n                        .getAll()\n                        .then(persons => {\n                            // this needed to be done, becuse my search works like that :P\n                            persons.forEach(person => person.matchSearch = true) \n                            this.setState({ persons })\n                            this.setState({\n                                error: 'puhelinnumero poistettu onnistuneesti',\n                              })\n                            setTimeout(() => {\n                                this.setState({error: null})\n                            }, 2000)\n                        })\n                } \n            )\n        }\n    }\n\n    handleNameChange = (event) => {\n        this.setState({newName: event.target.value})\n    }\n    handleNumberChange = (event) => {\n        this.setState({newNumber: event.target.value})\n    }\n    handleFilterChange = (event) => {\n        this.setState({filter: event.target.value})\n        let persons = [...this.state.persons]\n        if(event.target.value !== '') {    \n            persons.forEach(person => {\n                person.matchSearch = (person.name.toLowerCase().indexOf(event.target.value.toLowerCase()) !== -1)\n            })\n        } else {\n            persons.forEach(person => {\n                person.matchSearch = true\n            })\n        }\n        this.setState({persons})\n    }\n\n    \n\n    render() {\n        let personsToShow = this.state.persons.filter(person => person.matchSearch)\n         \n\n        return (\n        <div>\n            <Notification message={this.state.error}/>\n            <h2>Puhelinluettelo</h2>\n            \n\n            <Filter filter={this.state.filter} handleFilterChange = {this.handleFilterChange} /> \n\n            <h2>Lisää uusi</h2>\n\n            <form onSubmit={this.addEntry}>\n                <div>\n                    nimi: <input value = {this.state.newName} onChange={this.handleNameChange}/>\n                </div>\n                <div>\n                    numero: <input value = {this.state.newNumber} onChange={this.handleNumberChange}/>\n                </div>\n                <div>\n                    <button type=\"submit\">lisää</button>\n                </div>\n            </form>\n            <h2>Numerot</h2>\n            <table>\n                <tbody>\n                    {personsToShow.map(person => \n                            <Entry key = {person.name} person = {person} removeEntry = {this.removeEntry(person.id)} /> \n                    )\n                }\n                </tbody>\n            </table>\n        </div>\n        )   \n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}